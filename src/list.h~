#pragma once

#include "defines.h"
#include <stdlib.h>
#include <string.h>
struct array_list{

  size_t length;
  size_t capacity;
  size_t item_size;
  void * items;

};

array_list * array_list_create(usize item_size, usize initial_capacity){

  array_list * list = malloc(sizeof(array_list));
  if(!list)
    ERROR_RETURN(NULL, "couldnt allocate memory for list");
  list->item_size = item_size;
  list->capacity = initial_capacity;
  list->size = 0;
  list->items = malloc(item_size * initial_capacity);
  if(!list->items)
    ERROR_RETURN(NULL, "couldnt allocate memeory");
  return list;
};

usize array_list_append(array_list * list, const void * item){

  if(list->length == list->capacity){
    list->capacity = list->capacity > 0 ? list->capacity * 2 : 1;
    void * items = realloc(list->items, list->item_size * list->capacity);

    if(!items)
      ERROR_RETURN(-1, "couldt allocate ememory for arraylist);
    list->items = items;
}
  usize index = list->length++;
  memcpy((u8*)list->items + index * list->item_size, item, list->item_size);
  return index;
  
};

void * array_list_get(array_list * list, usize index){

  
};

u8 array_list_remove(array_list * list, usize index){

  
}
